#!/usr/bin/env python
# coding=UTF-8

# Based on tutorial from http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#my-right-prompt-battery-capacity
# Modified by Victor Peng

import math, subprocess
import platform
import sys


if platform.system() == 'Darwin': # hack. make it only works on Mac.
    p = subprocess.Popen(["ioreg", "-rc", "AppleSmartBattery"], stdout=subprocess.PIPE)
    output = p.communicate()[0]

    o_max = [l for l in output.splitlines() if 'MaxCapacity' in l][0]
    o_cur = [l for l in output.splitlines() if 'CurrentCapacity' in l][0]
    o_chg = [l for l in output.splitlines() if 'ExternalConnected' in l][0]

    b_max = float(o_max.rpartition('=')[-1].strip())
    b_cur = float(o_cur.rpartition('=')[-1].strip())
    b_chg = o_chg.rpartition('=')[-1].strip() == 'Yes'

    charge = b_cur / b_max

# Output

# parameters
    total_slots = 5
    green_bar_level = 4
    yellow_bar_level = 2

# text construction
    LIGHTNING = u'\u26A1'
    charged_bars = int(math.ceil(total_slots * charge))
    filled = charged_bars * u'â–¸'
    empty = (total_slots - charged_bars) * u'â–¹'
    out_text = filled + empty + (b_chg and LIGHTNING or ' ') + ('%02d' % (charge * 100))
    out = (out_text).encode('utf-8')

    color_green = '%{[32m%}'
    color_yellow = '%{[1;33m%}'
    color_red = '%{[31m%}'
    color_reset = '%{[00m%}'
    color_out = (
        color_green if len(filled) >= green_bar_level
        else color_yellow if len(filled) >= yellow_bar_level
        else color_red
    )

    out = color_out + out + color_reset


    sys.stdout.write(out)
