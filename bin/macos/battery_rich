#!/usr/bin/env python
# coding=UTF-8

# Based on tutorial from http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#my-right-prompt-battery-capacity
# Modified by Victor Peng

import math, subprocess
import platform
import sys


if platform.system() == 'Darwin': # hack. make it only works on Mac.
    p = subprocess.Popen(["ioreg", "-rc", "AppleSmartBattery"], stdout=subprocess.PIPE)
    output = p.communicate()[0].decode('utf-8')

    o_max = [l for l in output.splitlines() if '"MaxCapacity" =' in l][0]
    o_cur = [l for l in output.splitlines() if '"CurrentCapacity" =' in l][0]
    o_chg = [l for l in output.splitlines() if '"ExternalConnected" =' in l][0]

    b_max = float(o_max.split('=')[-1].strip())
    b_cur = float(o_cur.split('=')[-1].strip())
    b_chg = o_chg.split('=')[-1].strip() == 'Yes'

    charge = b_cur / b_max

# Output

# parameters
    TOTAL_SLOTS = 3
    GREEN_BAR_LEVEL = 2
    YELLOW_BAR_LEVEL = 1

# text construction
    LIGHTNING = u'\u26A1'
    charged_bars = int(math.ceil(TOTAL_SLOTS * charge))
    filled = charged_bars * u'â–¸'
    empty = (TOTAL_SLOTS - charged_bars) * u'â–¹'
    out_text = filled + empty + (b_chg and LIGHTNING or ' ') + ('%02d' % (charge * 100))

    color_green = '%{[32m%}'
    color_yellow = '%{[1;33m%}'
    color_red = '%{[31m%}'
    color_reset = '%{[00m%}'
    color_out = (
        color_green if len(filled) >= GREEN_BAR_LEVEL
        else color_yellow if len(filled) >= YELLOW_BAR_LEVEL
        else color_red
    )

    out = color_out + out_text + color_reset
    sys.stdout.write(out)
